/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JMemberRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JMember extends TableImpl<JMemberRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MEMBER</code>
     */
    public static final JMember MEMBER = new JMember();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JMemberRecord> getRecordType() {
        return JMemberRecord.class;
    }

    /**
     * The column <code>MEMBER.ID</code>.
     */
    public final TableField<JMemberRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>MEMBER.NAME</code>.
     */
    public final TableField<JMemberRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>MEMBER.EMAIL</code>.
     */
    public final TableField<JMemberRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private JMember(Name alias, Table<JMemberRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JMember(Name alias, Table<JMemberRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MEMBER</code> table reference
     */
    public JMember(String alias) {
        this(DSL.name(alias), MEMBER);
    }

    /**
     * Create an aliased <code>MEMBER</code> table reference
     */
    public JMember(Name alias) {
        this(alias, MEMBER);
    }

    /**
     * Create a <code>MEMBER</code> table reference
     */
    public JMember() {
        this(DSL.name("MEMBER"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JMemberRecord, Long> getIdentity() {
        return (Identity<JMemberRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JMemberRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8;
    }

    @Override
    public List<UniqueKey<JMemberRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_MEMBER_EMAIL);
    }

    @Override
    public JMember as(String alias) {
        return new JMember(DSL.name(alias), this);
    }

    @Override
    public JMember as(Name alias) {
        return new JMember(alias, this);
    }

    @Override
    public JMember as(Table<?> alias) {
        return new JMember(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JMember rename(String name) {
        return new JMember(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMember rename(Name name) {
        return new JMember(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JMember rename(Table<?> name) {
        return new JMember(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMember where(Condition condition) {
        return new JMember(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMember where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMember where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMember where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMember where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMember where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMember where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JMember where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMember whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JMember whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
